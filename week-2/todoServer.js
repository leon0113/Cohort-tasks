/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());


let todos = [];
let nextTodoId = 1;

///!----------------------------------------------------------------------------3.
app.post('/todos', (req, res) => {
    const { title, description } = req.body;
    if (!title || !description) {
        return res.status(400).json({ error: 'please fill all the fields' });
    }
    const data = {
        id: nextTodoId++,
        title,
        "completed": false,
        description
    }
    todos.unshift(data);
    res.status(200).json(data)
})

//!-----------------------------------------------------------------------------1.
app.get('/todos', (req, res) => {
    if (!todos.length) {
        return res.status(400).json({ error: 'No todos available' });
    }
    res.status(200).json(todos)
})

//!-----------------------------------------------------------------------------2.
app.get('/todos/:id', (req, res) => {
    const todoId = parseInt(req.params.id);

    // Find the todo item with the given ID
    const todo = todos.find(todo => todo.id === todoId);

    if (todo) {
        // If todo item found, respond with 200 OK and the todo item
        res.status(200).json(todo);
    } else {
        // If todo item not found, respond with 404 Not Found
        res.status(404).send('Todo item not found');
    }
})

///!----------------------------------------------------------------------------4.
app.put('/todos/:id', (req, res) => {
    const todoId = parseInt(req.params.id);
    const { title, completed, description } = req.body;
    if (!title && !completed && !description) {
        return res.status(400).json({ error: 'please input at least one change' });
    }
    const todoIndex = todos.findIndex((todo) => todo.id === todoId);
    if (todoIndex === -1) {
        return res.status(404).json({ error: 'Todo does not exist' });
    }
    if (title != undefined) {
        todos[todoIndex].title = title
    }
    if (completed != undefined) {
        todos[todoIndex].completed = completed
    }
    if (description != undefined) {
        todos[todoIndex].description = description
    }
    res.status(200).json(todos[todoIndex]);

})


///!----------------------------------------------------------------------------5.
app.delete('/todos/:id', (req, res) => {
    const todoId = parseInt(req.params.id);

    const todoIndex = todos.findIndex((todo) => todo.id === todoId);
    if (todoIndex === -1) {
        return res.status(404).json({ error: 'Todo does not exist' });
    }
    todos = todos.filter(todo => todo.id !== todoId);
    res.status(200).json({ msg: "todo deleted successfully!", todos });
})

// Start the server
app.listen(5001, () => {
    console.log(`Server is listening at http://localhost:5001`);
});


module.exports = app;